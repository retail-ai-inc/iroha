// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: cryptographic.proto

package cryptographic

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Cryptographic_Encrypt_FullMethodName = "/cryptographic.Cryptographic/Encrypt"
	Cryptographic_Decrypt_FullMethodName = "/cryptographic.Cryptographic/Decrypt"
)

// CryptographicClient is the client API for Cryptographic service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CryptographicClient interface {
	Encrypt(ctx context.Context, in *CryptoRequest, opts ...grpc.CallOption) (*CryptoResponse, error)
	Decrypt(ctx context.Context, in *CryptoRequest, opts ...grpc.CallOption) (*CryptoResponse, error)
}

type cryptographicClient struct {
	cc grpc.ClientConnInterface
}

func NewCryptographicClient(cc grpc.ClientConnInterface) CryptographicClient {
	return &cryptographicClient{cc}
}

func (c *cryptographicClient) Encrypt(ctx context.Context, in *CryptoRequest, opts ...grpc.CallOption) (*CryptoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CryptoResponse)
	err := c.cc.Invoke(ctx, Cryptographic_Encrypt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cryptographicClient) Decrypt(ctx context.Context, in *CryptoRequest, opts ...grpc.CallOption) (*CryptoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CryptoResponse)
	err := c.cc.Invoke(ctx, Cryptographic_Decrypt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CryptographicServer is the server API for Cryptographic service.
// All implementations must embed UnimplementedCryptographicServer
// for forward compatibility
type CryptographicServer interface {
	Encrypt(context.Context, *CryptoRequest) (*CryptoResponse, error)
	Decrypt(context.Context, *CryptoRequest) (*CryptoResponse, error)
	mustEmbedUnimplementedCryptographicServer()
}

// UnimplementedCryptographicServer must be embedded to have forward compatible implementations.
type UnimplementedCryptographicServer struct {
}

func (UnimplementedCryptographicServer) Encrypt(context.Context, *CryptoRequest) (*CryptoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Encrypt not implemented")
}
func (UnimplementedCryptographicServer) Decrypt(context.Context, *CryptoRequest) (*CryptoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Decrypt not implemented")
}
func (UnimplementedCryptographicServer) mustEmbedUnimplementedCryptographicServer() {}

// UnsafeCryptographicServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CryptographicServer will
// result in compilation errors.
type UnsafeCryptographicServer interface {
	mustEmbedUnimplementedCryptographicServer()
}

func RegisterCryptographicServer(s grpc.ServiceRegistrar, srv CryptographicServer) {
	s.RegisterService(&Cryptographic_ServiceDesc, srv)
}

func _Cryptographic_Encrypt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CryptoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CryptographicServer).Encrypt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cryptographic_Encrypt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CryptographicServer).Encrypt(ctx, req.(*CryptoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cryptographic_Decrypt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CryptoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CryptographicServer).Decrypt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cryptographic_Decrypt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CryptographicServer).Decrypt(ctx, req.(*CryptoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Cryptographic_ServiceDesc is the grpc.ServiceDesc for Cryptographic service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Cryptographic_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cryptographic.Cryptographic",
	HandlerType: (*CryptographicServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Encrypt",
			Handler:    _Cryptographic_Encrypt_Handler,
		},
		{
			MethodName: "Decrypt",
			Handler:    _Cryptographic_Decrypt_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cryptographic.proto",
}
